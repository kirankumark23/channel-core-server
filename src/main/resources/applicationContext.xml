<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"	
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:task="http://www.springframework.org/schema/task"	
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans	
		http://www.springframework.org/schema/beans/spring-beans.xsd

		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd

		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd

		http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.2.xsd		
		
		http://www.springframework.org/schema/jee 
        http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
        
        <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/DataSource"/>
        <jee:jndi-lookup id="interval" jndi-name="java:comp/env/interval"/>
        <jee:jndi-lookup id="threadCount" jndi-name="java:comp/env/threadCount"/>
        
        
        <context:component-scan base-package="com.appliedsni.channel.core.server" />
        <!-- Activates various annotations to be detected in bean classes e.g: @Autowired -->
		<context:annotation-config />
		<import resource="mongoApplicationContext.xml"/>
		<import resource="springamqp-rabbit-sender-context.xml"/>
		<import resource="springamqp-rabbt-listener-context.xml"/>
		<!-- AOP Configuration for profiling -->

		<!-- Our profiler class that we want to use to measure process time of service methods. -->
		<bean id="profiler" class="com.appliedsni.channel.core.server.config.Profiler" />

		<!-- Spring AOP -->
		<aop:config>
			<aop:aspect ref="profiler">
				<!-- Catch all method in the service package through AOP. -->
				<aop:pointcut id="serviceMethod" 
					expression="execution(* com.appliedsni.channel.core.server.*.*(..))" />
				<!-- For these methods use the profile named method in the profiler class we defined below. -->
				<aop:around pointcut-ref="serviceMethod" method="profile" />
			</aop:aspect>
		</aop:config>
		
		<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		    <property name="dataSource" ref="dataSource" />
		    <property name="entityInterceptor" ><bean  class="com.appliedsni.channel.core.server.config.EntityAuditLogInterceptor" /></property>
		    <property name="hibernateProperties">
		    	<props>
		    		<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
		    		<prop key="hibernate.show_sql">false</prop>
		    	</props>
		    </property>
		    <property name="annotatedClasses">
		    	<list>		 
		    		<value>com.appliedsni.channel.core.server.user.domain.UserEntity</value>   
		    		<value>com.appliedsni.channel.core.server.entity.SimpleTransactionProductEntity</value>
		    		<value>com.appliedsni.channel.core.server.entity.SimpleTransactionProductStepEntity</value>
		    		<value>com.appliedsni.channel.core.server.entity.ComplexTransactionProductEntity</value>
		    		<value>com.appliedsni.channel.core.server.entity.ComplexTransactionProductStepEntity</value>		    		
		    		<value>com.appliedsni.channel.core.server.entity.ComplexTransactionEntity</value>
		    		<value>com.appliedsni.channel.core.server.entity.ComplexTransactionStepEntity</value>
		    		<value>com.appliedsni.channel.core.server.entity.SimpleTransactionEntity</value>
		    		<value>com.appliedsni.channel.core.server.entity.SimpleTransactionStepEntity</value>
		    		<value>com.appliedsni.channel.core.server.entity.CBSIntegrationEntity</value>
		    		
		    		<value>com.appliedsni.channel.core.server.user.domain.BranchEntity</value>  
		    		<value>com.appliedsni.channel.core.server.user.domain.CompanyEntity</value>  
		    		<value>com.appliedsni.channel.core.server.user.domain.MenuEntity</value>  
		    		<value>com.appliedsni.channel.core.server.user.domain.RoleEntity</value>  
		    		<value>com.appliedsni.channel.core.server.user.domain.RoleActionsEntity</value>  
		    		<value>com.appliedsni.channel.core.server.user.domain.RoleMenuEntity</value> 
		    		<value>com.appliedsni.channel.core.server.user.domain.UserRoleEntity</value> 
		    		<value>com.appliedsni.channel.core.server.entity.AuditLogEntity</value>   
		    		
		    	</list>
		    </property>
		</bean>        
		
		<bean id="serverDao" class="channel.client.dao.ServerDao">
		    <property name="sessionFactory" ref="sessionFactory" />
		</bean>        
		
		<tx:annotation-driven/>
			<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager"> 
			<property name="sessionFactory" ref="sessionFactory" />
		</bean>		
		
		<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
			<property name="transactionManager" ref="transactionManager"/>
		</bean>
		
		<context:component-scan base-package="com.appliedsni.channel.core.server.*"/>
		
		<bean id="applicationContext" class="com.appliedsni.channel.core.server.config.ChannelApplicationContext"/>
		<bean id="springAMQPRabbitSender" class="com.appliedsni.channel.core.server.queue.SpringAMQPRabbitSender"/>
		<bean id="MQManager" class="com.appliedsni.channel.core.server.queue.MQManager" >
			<constructor-arg ref="serverDao" />
			<constructor-arg ref="springAMQPRabbitSender" />
		</bean>		
		
		<bean id="complexTransactionHandler" class="com.appliedsni.channel.core.server.handler.ComplexTransactionHandler" >
			<constructor-arg ref="serverDao" />
		</bean>		

		<bean id="simpleTransactionHandler" class="com.appliedsni.channel.core.server.handler.SimpleTransactionHandler" >
			<constructor-arg ref="serverDao" />
		</bean>

		<bean id="functionHandler" class="com.appliedsni.channel.core.server.handler.FunctionHandler" >
			<constructor-arg ref="serverDao" />
		</bean>

		<bean id="commonUtils" class="com.appliedsni.channel.core.server.handler.CommonUtils" >
			<constructor-arg ref="serverDao" />
		</bean>
				
		<bean id="recoverService" class="com.appliedsni.channel.core.server.handler.RecoverService">
			<constructor-arg ref="serverDao" />
		</bean>		
		       
        
		<task:scheduler id="scheduler" pool-size="#{threadCount}"/>
		<task:scheduled-tasks scheduler="scheduler">
			<task:scheduled ref="recoverService" method="recover" fixed-rate="#{interval}"/>
		</task:scheduled-tasks>
		
				

</beans>		